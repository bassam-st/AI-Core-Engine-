# modules/network_engineer.py - ูููุฏุณ ุงูุดุจูุงุช
import socket
import subprocess
import platform

class NetworkEngineer:
    def __init__(self):
        self.network_concepts = {
            'tcp': 'ุจุฑูุชูููู ุงูุชุญูู ูู ุงูุฅุฑุณุงู - ุงุชุตุงู ููุซูู ูุถูู ูุตูู ุงูุจูุงูุงุช',
            'udp': 'ุจุฑูุชูููู ุจูุงูุงุช ุงููุณุชุฎุฏู - ุงุชุตุงู ุณุฑูุน ุจุฏูู ุชุฃููุฏ ุงูุงุณุชูุงู',
            'ip': 'ุจุฑูุชูููู ุงูุฅูุชุฑูุช - ุนููุงู ูุฑูุฏ ููู ุฌูุงุฒ ุนูู ุงูุดุจูุฉ',
            'dns': 'ูุธุงู ุงุณู ุงููุทุงู - ูุญูู ุงูุฃุณูุงุก ุฅูู ุนูุงููู IP',
            'router': 'ุฌูุงุฒ ููุฌู ุงูุจูุงูุงุช ุจูู ุงูุดุจูุงุช ุงููุฎุชููุฉ',
            'switch': 'ุฌูุงุฒ ูุฑุจุท ุงูุฃุฌูุฒุฉ ูู ููุณ ุงูุดุจูุฉ ุงููุญููุฉ'
        }
    
    def handle_network_request(self, message, analysis):
        """ูุนุงูุฌุฉ ุทูุจุงุช ุงูุดุจูุงุช"""
        message_lower = message.lower()
        
        if any(word in message_lower for word in ['ุงุดุฑุญ', 'ูุง ูู', 'ููููู']):
            return self.explain_concept(message)
        elif any(word in message_lower for word in ['ูุณุญ', 'ูุญุต', 'scan']):
            return self.scan_network(message)
        elif any(word in message_lower for word in ['ping', 'ุงุชุตุงู', 'ุงูุชุฑูุช']):
            return self.test_connection(message)
        else:
            return self.general_network_help(message)
    
    def explain_concept(self, message):
        """ุดุฑุญ ููููู ุดุจูู"""
        for concept, explanation in self.network_concepts.items():
            if concept in message.lower():
                return {
                    'message': f"๐ ุดุฑุญ {concept.upper()}:\n{explanation}",
                    'type': 'concept_explanation',
                    'concept': concept,
                    'suggestions': [f'ูุซุงู ุนูู {concept}', 'ููู ูุนูู', 'ูุดุงูู ุดุงุฆุนุฉ']
                }
        
        # ุฅุฐุง ูู ูุชู ุงูุนุซูุฑ ุนูู ููููู ูุญุฏุฏ
        concepts_list = "\n".join([f"โข {concept.upper()}" for concept in self.network_concepts.keys()])
        return {
            'message': f"๐ ุงูููุงููู ุงูุดุจููุฉ ุงููุชุงุญุฉ:\n{concepts_list}\n\nุฃู ููููู ุชุฑูุฏ ุดุฑุญูุ",
            'type': 'concepts_list',
            'suggestions': ['ุดุฑุญ TCP', 'ุดุฑุญ DNS', 'ุดุฑุญ IP']
        }
    
    def scan_network(self, message):
        """ูุณุญ ุงูุดุจูุฉ"""
        try:
            # ุงูุญุตูู ุนูู ุนููุงู IP ุงููุญูู
            hostname = socket.gethostname()
            local_ip = socket.gethostbyname(hostname)
            
            network_info = {
                'hostname': hostname,
                'local_ip': local_ip,
                'platform': platform.system()
            }
            
            return {
                'message': f"๐ ูุนูููุงุช ุงูุดุจูุฉ:\nโข ุงุณู ุงูุฌูุงุฒ: {hostname}\nโข IP ูุญูู: {local_ip}\nโข ุงููุธุงู: {platform.system()}",
                'type': 'network_scan',
                'network_info': network_info,
                'suggestions': ['ูุญุต ุงูุงุชุตุงู ุจุงูุฅูุชุฑูุช', 'ูุนูููุงุช ุงูุดุจูุฉ ุงููุชูุฏูุฉ', 'ูุญุต ุงูููุงูุฐ']
            }
            
        except Exception as e:
            return {
                'message': f"โ ุชุนุฐุฑ ูุณุญ ุงูุดุจูุฉ: {e}",
                'type': 'error',
                'suggestions': ['ูุญุงููุฉ ุฃุฎุฑู', 'ูุญุต ุฅุนุฏุงุฏุงุช ุงูุดุจูุฉ']
            }
    
    def test_connection(self, message):
        """ุงุฎุชุจุงุฑ ุงูุงุชุตุงู"""
        try:
            # ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจุงูุฅูุชุฑูุช
            target = "8.8.8.8"  # DNS Google
            if "ุฌูุฌู" in message or "google" in message.lower():
                target = "google.com"
            
            # ุงุณุชุฎุฏุงู ping (ูุนุชูุฏ ุนูู ุงููุธุงู)
            if platform.system().lower() == "windows":
                cmd = ["ping", "-n", "2", target]
            else:
                cmd = ["ping", "-c", "2", target]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                status
