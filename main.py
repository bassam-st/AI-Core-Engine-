#!/usr/bin/env python3
# ุงูููุงุฉ ุงูุฐููุฉ ุงููุชูุฏูุฉ - AI Core Engine
# ูุณุฎุฉ ูุชูุงููุฉ ูุน Android

import os
import sys
import logging
import json
from datetime import datetime

# ุฅุถุงูุฉ ุงููุณุงุฑุงุช ูููุดุฑูุน
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'core'))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'modules'))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'tools'))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'utils'))

try:
    from core.brain import AICoreBrain
    from utils.logger import setup_logging
except ImportError as e:
    print(f"ุฎุทุฃ ูู ุงุณุชูุฑุงุฏ ุงูููุชุจุงุช: {e}")
    # ุณููุดุฆ ุงูุจุฏุงุฆู ุงูุฃุณุงุณูุฉ

class BasicAICore:
    def __init__(self):
        self.setup_directories()
        self.load_knowledge()
        
    def setup_directories(self):
        """ุฅูุดุงุก ุงููุฌูุฏุงุช ุงูุถุฑูุฑูุฉ"""
        dirs = ['knowledge', 'memory', 'logs']
        for dir_name in dirs:
            os.makedirs(dir_name, exist_ok=True)
    
    def load_knowledge(self):
        """ุชุญููู ูุงุนุฏุฉ ุงููุนุฑูุฉ"""
        try:
            with open('knowledge/knowledge_base.json', 'r', encoding='utf-8') as f:
                self.knowledge = json.load(f)
        except:
            self.knowledge = {
                "greetings": ["ูุฑุญุจุงู!", "ุฃููุงู ูุณููุงู!", "ูุฑุญุจุงู ุจู ูู ุงูููุงุฉ ุงูุฐููุฉ"],
                "help": "ุฃุณุชุทูุน ูุณุงุนุฏุชู ูู ุงูุจุฑูุฌุฉุ ุงูุดุจูุงุชุ ุงูุฃูุธูุฉุ ูุงูุฃูู ุงูุณูุจุฑุงูู"
            }
    
    def process_message(self, message):
        """ูุนุงูุฌุฉ ุงูุฑุณุงูุฉ ุงูุฃุณุงุณูุฉ"""
        message_lower = message.lower()
        
        if any(word in message_lower for word in ['ูุฑุญุจ', 'ุงููุง', 'ุณูุงู']):
            return "ูุฑุญุจุงู ุจู! ๐ ุฃูุง ุงูููุงุฉ ุงูุฐููุฉ. ููู ูููููู ูุณุงุนุฏุชู ุงููููุ"
        
        elif any(word in message_lower for word in ['ุจุฑูุฌุฉ', 'ููุฏ', 'code']):
            return "ุฃุณุชุทูุน ูุณุงุนุฏุชู ูู ูุชุงุจุฉ ุงูุฃููุงุฏ. ุฃุฎุจุฑูู ูุง ุงูุฐู ุชุฑูุฏ ุจุฑูุฌุชูุ"
        
        elif any(word in message_lower for word in ['ุดุจูุฉ', 'network']):
            return "ูุฌุงู ุงูุดุจูุงุช ูุชุงุญ! ูููููู ุดุฑุญ ุงูููุงููู ุฃู ูุณุงุนุฏุชู ูู ุชุญููู ุงูุดุจูุงุช."
        
        elif any(word in message_lower for word in ['ูุธุงู', 'system']):
            return "ุฅุฏุงุฑุฉ ุงูุฃูุธูุฉุ ููุชุงุฒ! ุฃุณุชุทูุน ูุณุงุนุฏุชู ูู ุชุญููู ูุฅุฏุงุฑุฉ ุงูุฃูุธูุฉ."
        
        elif any(word in message_lower for word in ['ุฃูู', 'security']):
            return "ุงูุฃูู ุงูุณูุจุฑุงูู ูุฌุงู ููู! ููู ูููููู ูุณุงุนุฏุชู ูู ุชุฃููู ุฃูุธูุชูุ"
        
        else:
            return f"ุฃููู ุฃูู ุชููู: '{message}'. ุฏุนูู ุฃุณุงุนุฏู ูู:\n- ุงูุจุฑูุฌุฉ ูุงูุชุทููุฑ\n- ุงูุดุจูุงุช ูุงูุงุชุตุงูุงุช\n- ุฅุฏุงุฑุฉ ุงูุฃูุธูุฉ\n- ุงูุฃูู ุงูุณูุจุฑุงูู\n\nุฃู ูุฌุงู ุชูุถูุ"

def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ ููุชุดุบูู ุนูู Android"""
    print("=" * 50)
    print("๐ ุงูููุงุฉ ุงูุฐููุฉ ุงููุชูุฏูุฉ - AI Core Engine")
    print("๐ฑ ูุณุฎุฉ ูุชูุงููุฉ ูุน Samsung S24 Ultra")
    print("=" * 50)
    print("\nุงููุฌุงูุงุช ุงููุชุงุญุฉ:")
    print("๐น ุงูุจุฑูุฌุฉ ูุชุทููุฑ ุงูุฃููุงุฏ")
    print("๐น ุงูุดุจูุงุช ูุงูุงุชุตุงูุงุช") 
    print("๐น ุฅุฏุงุฑุฉ ุงูุฃูุธูุฉ")
    print("๐น ุงูุฃูู ุงูุณูุจุฑุงูู")
    print("๐น ุฅุฏุงุฑุฉ ุงููุดุงุฑูุน")
    print("=" * 50)
    print("ุงูุชุจ 'ุฎุฑูุฌ' ููุฅููุงุก")
    print("=" * 50)
    
    try:
        ai_core = AICoreBrain()
        print("โ ุงูููุงุฉ ุงููุชูุฏูุฉ ุฌุงูุฒุฉ!")
    except:
        ai_core = BasicAICore()
        print("โ ุงูููุงุฉ ุงูุฃุณุงุณูุฉ ุฌุงูุฒุฉ!")
    
    while True:
        try:
            user_input = input("\n๐ค ุฃูุช: ").strip()
            
            if user_input.lower() in ['ุฎุฑูุฌ', 'exit', 'quit']:
                print("๐ ูุน ุงูุณูุงูุฉ! ุฅูู ุงูููุงุก.")
                break
                
            if not user_input:
                continue
                
            # ูุนุงูุฌุฉ ุงูุฑุณุงูุฉ
            if hasattr(ai_core, 'process_message'):
                response = ai_core.process_message(user_input)
            else:
                response = "ุงููุธุงู ููุฏ ุงูุชุทููุฑ..."
                
            print(f"๐ค ุงูููุงุฉ: {response}")
            
        except KeyboardInterrupt:
            print("\n\nโน๏ธ ุชู ุฅููุงู ุงูุจุฑูุงูุฌ")
            break
        except Exception as e:
            print(f"โ ุฎุทุฃ: {e}")

if __name__ == "__main__":
    main()
